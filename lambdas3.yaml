AWSTemplateFormatVersion: '2010-09-09'
Parameters:
  BucketName:
    Type: String
  DBName:
    Type: String
Resources:
  Bucket:
    Type: AWS::S3::Bucket
    DependsOn:
      - ProcessingLambdaPermission
    Properties:
      BucketName: !Ref BucketName
      NotificationConfiguration:
        LambdaConfigurations:
          - Event: s3:ObjectCreated:*
            Function: !GetAtt ProcessingLambdaFunction.Arn
            Filter:
              S3Key:
                Rules:
                  - Name: suffix
                    Value: .txt

  ProcessingLambdaPermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref ProcessingLambdaFunction
      Principal: s3.amazonaws.com
      SourceArn: !Sub arn:aws:s3:::${BucketName}
      SourceAccount: !Ref AWS::AccountId

  IAMManagedPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Sub ${BucketName}-policy
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - s3:GetObject
            Resource: !Sub arn:aws:s3:::${BucketName}/*
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
          - Effect: Allow
            Action:
              - dynamodb:PutItem
            Resource: !Sub arn:aws:dynamodb:*:*:table/${DBName}

  ProcessingLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${BucketName}-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - !Ref IAMManagedPolicy

  DynamoDBTable:
    UpdateReplacePolicy: Delete
    Type: AWS::DynamoDB::Table
    DeletionPolicy: Delete
    Properties:
      TableName: !Ref DBName
      AttributeDefinitions:
        - AttributeName: filename
          AttributeType: S
      KeySchema:
        - AttributeName: filename
          KeyType: HASH
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  ProcessingLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: LambdaS3Function
      Code:
        ZipFile: |
          import boto3
          dynamodb = boto3.client('dynamodb')
          def lambda_handler(event, context):
              bucket_name = event['Records'][0]['s3']['bucket']['name']
              key = event['Records'][0]['s3']['object']['key']
              response = dynamodb.put_item(
                  TableName='FileUploadTable',
                  Item={
                      'filename': {'S': key}
                  }
              )

      Runtime: python3.8
      Handler: index.lambda_handler
      Role: !GetAtt ProcessingLambdaExecutionRole.Arn
      MemorySize: 512
      Timeout: 120